unit ManCr1;

interface

uses
  Windows, Messages, SysUtils, Classes, Graphics, Controls, Forms, Dialogs,
  Fpadrao, ExtCtrls, dxCntner, dxEditor, dxExEdtr, dxEdLib, dxDBELib,
  StdCtrls, Buttons, DBTables, Db, Wwdatsrc, Wwquery, dxDBEdtr,
  dxDBColorPickEdit, dxDBColorLookupEdit, dxDBColorCurrencyEdit,
  dxDBColorDateEdit, dxDBColorMemo, dxDBColorEdit;

type
  TfmManCr1 = class(TfmPadrao)
    PaintBox: TPaintBox;
    EdObsCre: TdxDBColorMemo;
    bCancelar: TBitBtn;
    bConfirmar: TBitBtn;
    FatCre: TwwQuery;
    DsCre: TwwDataSource;
    UpCre: TUpdateSQL;
    Label29: TLabel;
    Label9: TLabel;
    EdNumRes: TdxDBColorEdit;
    Label2: TLabel;
    Label68: TLabel;
    EdDteRes: TdxDBColorDateEdit;
    Label37: TLabel;
    Label48: TLabel;
    EdCodEmp: TdxDBColorEdit;
    bpsqEmp: TSpeedButton;
    EdApeEmp: TdxDBColorEdit;
    pnApeEmp: TPanel;
    Label1: TLabel;
    EdTotCre: TdxDBColorCurrencyEdit;
    Label3: TLabel;
    Label4: TLabel;
    quSql: TwwQuery;
    Label5: TLabel;
    EdHreAtu: TdxDBColorEdit;
    Bevel1: TBevel;
    CbNomAtu: TdxDBColorLookupEdit;
    GerUsu: TwwQuery;
    GerUsuCODUSU: TIntegerField;
    GerUsuLOGUSU: TStringField;
    DsUsu: TwwDataSource;
    EdUsuAtu: TdxDBColorEdit;
    EdDteAtu: TdxDBColorDateEdit;
    Label6: TLabel;
    Label7: TLabel;
    Label8: TLabel;
    Label10: TLabel;
    Label11: TLabel;
    EdSitCre: TdxDBColorPickEdit;
    Label12: TLabel;
    Label13: TLabel;
    Label14: TLabel;
    Label15: TLabel;
    EdNumNfs: TdxDBColorEdit;
    FatCreCODEMP: TIntegerField;
    FatCreDTERES: TDateTimeField;
    FatCreNUMRES: TIntegerField;
    FatCreSEQCRE: TIntegerField;
    FatCreNUMNFS: TIntegerField;
    FatCreDTECRE: TDateTimeField;
    FatCreHRECRE: TStringField;
    FatCreTOTCRE: TFloatField;
    FatCreMEDCOM: TFloatField;
    FatCreBASCOM: TFloatField;
    FatCreTOTCOM: TFloatField;
    FatCreOBSCRE: TMemoField;
    FatCreCODUSU: TIntegerField;
    FatCreSITCRE: TStringField;
    FatCreDTEATU: TDateTimeField;
    FatCreHREATU: TStringField;
    FatCreUSUATU: TIntegerField;
    FatCreCODCLI: TIntegerField;
    FatCreNOMCLI: TStringField;
    FatCreCODVEN: TIntegerField;
    FatCreAPEVEN: TStringField;
    FatCreLOGUSU: TStringField;
    Label16: TLabel;
    Label17: TLabel;
    EdCodCli: TdxDBColorEdit;
    bPsqCli: TSpeedButton;
    pnNomCli: TPanel;
    EdNomCli: TdxDBColorEdit;
    Label18: TLabel;
    Label19: TLabel;
    EdCodVen: TdxDBColorEdit;
    bPsqVen: TSpeedButton;
    pnNomVen: TPanel;
    EdNomVen: TdxDBColorEdit;
    FatCreINSCLI: TStringField;
    FatCreCGCCLI: TStringField;
    procedure SaiCliente;
    procedure PaintBoxPaint(Sender: TObject);
    procedure bpsqEmpClick(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure bCancelarClick(Sender: TObject);
    procedure EdCodEmpKeyPress(Sender: TObject; var Key: Char);
    procedure bConfirmarClick(Sender: TObject);
    procedure FatCreNewRecord(DataSet: TDataSet);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure EdCodEmpExit(Sender: TObject);
    procedure bPsqCliClick(Sender: TObject);
    procedure EdCodCliKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure bPsqVenClick(Sender: TObject);
    procedure EdCodVenKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure EdCodVenExit(Sender: TObject);
    procedure EdCodCliExit(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  fmManCr1: TfmManCr1;

implementation

uses dxDemoUtils, Bbmensag, ManGDB, ManCre, PsqEmp, AuxIni, AuxPsq, PsqVen;

{$R *.DFM}

procedure TfmManCr1.PaintBoxPaint(Sender: TObject);
begin
  inherited;
  with Sender as TPaintBox do
    FillGrayGradientRect(PaintBox.Canvas, PaintBox.ClientRect, PaintBox.Color);
end;

procedure TfmManCr1.bpsqEmpClick(Sender: TObject);
begin
  inherited;

  try

    fmPsqEmp := TfmPsqEmp.Create(Self);
    fmPsqEmp.ShowModal;

    if fmPsqEmp.CodEmp > 0 then
    begin

      FatCreCodEmp.Value := fmPsqEmp.CodEmp;

      EdCodEmp.Text := IntToStr(FatCreCodEmp.Value);

      pnApeEmp.Caption := fmPsqEmp.ApeEmp;

    end;

  finally

    FreeAndNil(fmPsqEmp);

  end;

  EdCodEmp.SetFocus;

end;

procedure TfmManCr1.FormShow(Sender: TObject);
begin
  inherited;

  if fmManCre.CodEmp > 0 then
  begin

    FatCre.Close;
    FatCre.Params[0].AsInteger := fmManCre.CodEmp;
    FatCre.Params[1].AsDateTime := fmManCre.DteRes;
    FatCre.Params[2].AsInteger := fmManCre.NumRes;
    FatCre.Params[3].AsInteger := fmManCre.SeqCre;
    FatCre.Open;

    with quSQL, SQL do
    begin

      Close;
      Text := ' Select ApeEmp From GerEmp' +
        ' Where CodEmp = :CodEmp';

      if GFlgAce = 'Sim' then
        Text := Text + ' and CodFil > ''' + '0' + '''';

      with Params do
      begin

        Params[0].AsInteger := FatCreCodEmp.Value;

      end;

      Open;

      pnApeEmp.Caption := FieldbyName('ApeEmp').AsString;

    end;

    with quSQL, SQL do
    begin

      Close;
      Text := ' Select NomCli From FinCli Where FinCli.CodCli = ' + QuotedStr(IntToStr(FatCreCodCli.Value));
      Open;

      pnNomCli.Caption := FieldbyName('NomCli').AsString;

    end;

    with quSQL, SQL do
    begin

      Close;
      Text := ' Select ApeVen From FinVen Where FinVen.CodVen = ' + QuotedStr(IntToStr(FatCreCodVen.Value));
      Open;

      pnNomVen.Caption := FieldbyName('ApeVen').AsString;

    end;

    GerUsu.Close;
    GerUsu.Params[0].AsInteger := FatCreUsuAtu.Value;
    GerUsu.Open;

    bPsqEmp.Enabled := False;

    EdCodEmp.Enabled := False;
    EdNumRes.Enabled := False;
    EdDteRes.Enabled := False;

    EdCodEmp.Font.Style := [fsBold];
    EdNumRes.Font.Style := [fsBold];
    EdDteRes.Font.Style := [fsBold];

    FatCre.Edit;

    EdObsCre.SetFocus;

  end
  else
  begin

    FatCre.Insert;

    EdCodEmp.SetFocus;

  end;
end;

procedure TfmManCr1.bCancelarClick(Sender: TObject);
begin
  inherited;

  if FatCre.State <> dsBrowse then
    FatCre.CancelUpdates;

  Close;

end;

procedure TfmManCr1.EdCodEmpKeyPress(Sender: TObject; var Key: Char);
begin
  inherited;
  if not (key in ['0'..'9']) then
    key := #0;
end;

procedure TfmManCr1.bConfirmarClick(Sender: TObject);
begin
  inherited;
  if FatCre.State = dsInsert then
  begin

    if FatCreCodEmp.Value = 0 then
      fmsgErro('Campo de Preenchimento Obrigatorio não Informado.', EdCodEmp);
    if FatCreCodCli.Value = 0 then
      fmsgErro('Campo de Preenchimento Obrigatorio não Informado.', EdCodCli);
    if FatCreCodVen.Value = 0 then
      fmsgErro('Campo de Preenchimento Obrigatorio não Informado.', EdCodVen);
    if FatCreNumNfs.Value = 0 then
      fmsgErro('Campo de Preenchimento Obrigatorio não Informado.', EdNumNfs);
    if FatCreTotCre.Value = 0 then
      fmsgErro('Campo de Preenchimento Obrigatorio não Informado.', EdTotCre);

    if Trim(FatCreObsCre.Value) = '' then
      fmsgErro('Campo de Preenchimento Obrigatorio não Informado.', EdObsCre);

    if fMsg('Confirma Lançamento de Crédito para o Cliente ?', 'S') then
    begin

      with FatCre do
      begin

        fmManGDB.dbMain.StartTransaction; {Inicia a Transação}
        ;

        try

          ApplyUpdates; {Tenta aplicar as alterações}
          ;

          fmManGDB.dbMain.Commit; {confirma todas as alterações fechando a transação}
          ;

        except

          fmManGDB.dbMain.Rollback; {desfaz as alterações se acontecer um erro}
          ;

          if FatCre.State = dsBrowse then
            FatCre.Edit;

          EdCodEmp.SetFocus;

          raise;

        end;

        CommitUpdates; {sucesso!, limpa o cache...}

      end;

      Close;

    end;

  end
  else
  begin

    if fMsg('Confirma Alterações no Lançamento de Crédito ?', 'S') then
    begin

      with FatCre do
      begin

        fmManGDB.dbMain.StartTransaction; {Inicia a Transação}
        ;

        try

          ApplyUpdates; {Tenta aplicar as alterações}
          ;

          fmManGDB.dbMain.Commit; {confirma todas as alterações fechando a transação}
          ;

        except

          fmManGDB.dbMain.Rollback; {desfaz as alterações se acontecer um erro}
          ;

          if FatCre.State = dsBrowse then
            FatCre.Edit;

          EdObsCre.SetFocus;

          raise;

        end;

        CommitUpdates; {sucesso!, limpa o cache...}

      end;

      Close;

    end;
  end;
end;

procedure TfmManCr1.FatCreNewRecord(DataSet: TDataSet);
begin
  inherited;

  FatCre.DisableControls;

  FatCreDteCre.Value := Date;
  FatCreCodEmp.Value := GEmp_Id;
  FatCreCodUsu.Value := GUsu_Id;
  FatCreSitCre.Value := 'Indeferido';
  FatCreHreCre.Value := TimeToStr(Time);

  if GEmp_Id > 0 then
    EdCodEmp.Text := IntToStr(GEmp_Id);

  GerUsu.Close;
  GerUsu.Params[0].AsInteger := FatCreUsuAtu.Value;
  GerUsu.Open;

  with quSQL, SQL do
  begin

    Close;
    Text := ' Select ApeEmp From GerEmp' +
      ' Where CodEmp = :CodEmp';

    if GFlgAce = 'Sim' then
      Text := Text + ' and CodFil > ''' + '0' + '''';

    with Params do
    begin

      Params[0].AsInteger := FatCreCodEmp.Value;

    end;

    Open;

    pnApeEmp.Caption := quSQL.FieldbyName('ApeEmp').AsString;

  end;

  FatCre.EnableControls;

  EdCodEmp.SetFocus;

end;

procedure TfmManCr1.FormClose(Sender: TObject; var Action: TCloseAction);
var
  DteRes: TDateTime;
  CodEmp, NumRes, SeqCre: integer;
begin
  inherited;

  CodEmp := fmManCre.FatCreCodEmp.Value;
  DteRes := fmManCre.FatCreDteRes.Value;
  NumRes := fmManCre.FatCreNumRes.Value;
  SeqCre := fmManCre.FatCreSeqCre.Value;

  fmManCre.FatCre.Close;
  fmManCre.FatCre.Open;

  if CodEmp > 0 then
    fmManCre.FatCre.Locate('CodEmp;DteRes;NumRes;SeqCre', VarArrayOf([CodEmp, DteRes, NumRes, SeqCre]), [loPartialKey]);

  Action := CaFree;

end;

procedure TfmManCr1.EdCodEmpExit(Sender: TObject);
begin
  inherited;
  if FatCreCodEmp.Value > 0 then
  begin

    if GFlgAce <> 'Sim' then
    begin

      with quSQL, SQL do
      begin

        Close;
        Text := ' Select FLGDEL,SEQIMP from GerPar';
        Open;

        if Trim(FieldbyName('FLGDEL').AsString) = '*' then
        begin

          GFlgAce := 'Sim';

          if FieldbyName('SEQIMP').AsInteger > 0 then
            GEmpLog := FieldbyName('SEQIMP').AsInteger;

        end
        else
        begin

          GEmpLog := 0;
          GFlgAce := 'Nao';

        end;
      end;
    end;

    with quSql, SQL do
    begin

      Close;
      Text := ' Select GerEmp.ApeEmp From GerEmp Where GerEmp.CodEmp = :CodEmp';

      if GFlgAce = 'Sim' then
      begin

        if GEmpLog > 0 then
          Text := Text + ' and GerEmp.CodEmp = ' + QuotedStr(IntToStr(GEmpLog))
        else
          Text := Text + ' and GerEmp.CodFil > 0';

      end;

      with Params do
      begin

        Params[0].AsInteger := FatCreCodEmp.Value;

      end;

      Open;

    end;

    if Trim(quSql.FieldbyName('ApeEmp').AsString) <> '' then
      pnApeEmp.Caption := quSql.FieldbyName('ApeEmp').AsString
    else
    begin

      pnApeEmp.Caption := '';

      fmsgErro('Empresa Informada não Encontrada', EdCodEmp);

    end;

  end
  else
  begin

    pnApeEmp.Caption := '';

    fmsgErro('Campo de Preenchimento Obrigátorio não Informado', EdCodEmp);

  end;
end;

procedure TfmManCr1.bPsqCliClick(Sender: TObject);
begin
  inherited;

  try

    fmAuxIni := TfmAuxIni.Create(Self);

    fmAuxIni.TipoPesq := 'C';

    fmAuxIni.ShowModal;

    if fmAuxIni.CodCli > 0 then
    begin

      FatCreCodCli.Value := fmAuxIni.CodCli;
      FatCreCodVen.Value := fmAuxIni.CodVen;

      pnNomCli.Caption := fmAuxIni.NomCli;

      EdCodCli.Text := IntToStr(FatCreCodCli.Value);

      if FatCreCodVen.Value > 0 then
        EdCodVen.Text := IntToStr(FatCreCodVen.Value)
      else
        EdCodVen.Text := '';

    end;

  finally

    FreeAndNil(fmAuxIni);

  end;

  if FatCreCodCli.Value > 0 then
    SaiCliente
  else
    EdCodCli.SetFocus;

end;

procedure TfmManCr1.EdCodCliKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
begin
  inherited;
  if key = 112 then
  begin {F1 - Iniciais}

    try

      fmAuxIni := TfmAuxIni.Create(Self);

      fmAuxIni.TipoPesq := 'C';

      fmAuxIni.ShowModal;

      if fmAuxIni.CodCli > 0 then
      begin

        FatCreCodCli.Value := fmAuxIni.CodCli;
        FatCreCodVen.Value := fmAuxIni.CodVen;

        EdCodCli.Text := IntToStr(FatCreCodCli.Value);

        pnNomCli.Caption := fmAuxIni.NomCli;

        if FatCreCodVen.Value > 0 then
          EdCodVen.Text := IntToStr(FatCreCodVen.Value)
        else
          EdCodVen.Text := '';

      end;

    finally

      FreeAndNil(fmAuxIni);

    end;

    if FatCreCodCli.Value > 0 then
      SaiCliente
    else
      EdCodCli.SetFocus;

  end;

  if key = 113 then
  begin {F2 - Inteligente}

    try

      fmAuxPsq := TfmAuxPsq.Create(Self);

      fmAuxPsq.TipoPesq := 'C';
      fmAuxPsq.ShowModal;

      if fmAuxPsq.CodCli > 0 then
      begin

        FatCreCodCli.Value := fmAuxPsq.CodCli;
        FatCreCodVen.Value := fmAuxPsq.CodVen;

        EdCodCli.Text := IntToStr(FatCreCodCli.Value);

        pnNomCli.Caption := fmAuxPsq.NomCli;

        if FatCreCodVen.Value > 0 then
          EdCodVen.Text := IntToStr(FatCreCodVen.Value)
        else
          EdCodVen.Text := '';

      end;

    finally

      FreeAndNil(fmAuxPsq);

    end;

    if FatCreCodCli.Value > 0 then
      SaiCliente
    else
      EdCodCli.SetFocus;

  end;
end;

procedure TfmManCr1.SaiCliente;
begin
  if FatCreCodCli.Value > 0 then
  begin

    if FatCre.State <> dsBrowse then
    begin

      with quSql, SQL do
      begin

        Close;
        Text := ' Select * From FinCli Where CodCli = :CodCli';

        with Params do
        begin

          Params[0].AsInteger := FatCreCodCli.Value;

        end;

        Open;

      end;

      if quSql.FieldbyName('CodCli').AsInteger = FatCreCodCli.Value then
      begin

        FatCreCodVen.Value := quSQL.FieldbyName('CodVen').AsInteger;

        pnNomCli.Caption := quSQL.FieldbyName('NomCli').AsString;

        if FatCreCodVen.Value > 0 then
          EdCodVen.Text := quSQL.FieldbyName('CodVen').AsString;

        if FatCreCodVen.Value > 0 then
        begin

          with quSQL, SQL do
          begin

            Close;
            Text := ' Select CodVen,ApeVen From FinVen Where FinVen.CodVen = :CodVen';

            with Params do
            begin

              Params[0].AsInteger := FatCreCodVen.Value;

            end;

            Open;

          end;

          if quSQL.FieldbyName('CodVen').AsInteger > 0 then
            pnNomVen.Caption := quSQL.FieldbyName('ApeVen').AsString
          else
          begin

            pnNomVen.Caption := ' ';

            fmsgErro('Vendedor Informado para o Cliente não Encontrado.', EdCodCli);

          end;
        end;

        if EdCodVen.Enabled then
          EdCodVen.SetFocus
        else
          EdNumNfs.SetFocus;

      end
      else
      begin

        pnNomCli.Caption := '';
        pnNomVen.Caption := '';

        fmsgErro('Cliente Informado não Encontrado', EdCodCli);

      end;
    end;

  end
  else
  begin

    pnNomCli.Caption := '';
    pnNomVen.Caption := '';

    fmsgErro('Campo de Preenchimento Obrigátorio não Informado', EdCodCli);

  end;
end;

procedure TfmManCr1.bPsqVenClick(Sender: TObject);
begin
  inherited;

  try

    fmPsqVen := TfmPsqVen.Create(Self);

    fmPsqVen.ShowModal;

    if fmPsqVen.CodVen > 0 then
    begin

      FatCreCodVen.Value := fmPsqVen.CodVen;

      pnNomVen.Caption := fmPsqVen.NomVen;

      EdCodVen.Text := IntToStr(FatCreCodVen.Value);

    end;

  finally

    FreeAndNil(fmPsqVen);

  end;

  EdCodVen.SetFocus;

end;

procedure TfmManCr1.EdCodVenKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
var
  CodVen: integer;
begin
  inherited;

  CodVen := 0;

  if key = 112 then
  begin {F1 - Iniciais}

    try

      fmPsqVen := TfmPsqVen.Create(Self);

      fmPsqVen.ShowModal;

      if fmPsqVen.CodVen > 0 then
      begin

        CodVen := fmPsqVen.CodVen;

        FatCreCodVen.Value := fmPsqVen.CodVen;

        pnNomVen.Caption := fmPsqVen.NomVen;

        EdCodVen.Text := IntToStr(FatCreCodVen.Value);

      end;

    finally

      FreeAndNil(fmPsqVen);

    end;

    if CodVen > 0 then
      EdNumNfs.SetFocus
    else
      EdCodVen.SetFocus;

  end;

  if key = 113 then
  begin {F2 - Inteligente}

    try

      fmAuxPsq := TfmAuxPsq.Create(Self);

      fmAuxPsq.TipoPesq := 'V';
      fmAuxPsq.ShowModal;

      if fmAuxPsq.CodVen > 0 then
      begin

        CodVen := fmAuxPsq.CodVen;

        FatCreCodVen.Value := fmAuxPsq.CodVen;

        pnNomVen.Caption := fmAuxPsq.NomVen;

        EdCodVen.Text := IntToStr(FatCreCodVen.Value);

      end;

    finally

      FreeAndNil(fmAuxPsq);

    end;

    if CodVen > 0 then
      EdNumNfs.SetFocus
    else
      EdCodVen.SetFocus;

  end;
end;

procedure TfmManCr1.EdCodVenExit(Sender: TObject);
begin
  inherited;
  if FatCre.State <> dsBrowse then
  begin

    if FatCreCodVen.Value > 0 then
    begin

      with quSql, SQL do
      begin

        Close;
        Text := ' Select ApeVen From FinVen Where CodVen = :CodVen';

        with Params do
        begin

          Params[0].AsInteger := FatCreCodVen.Value;

        end;

        Open;

      end;

      if Trim(quSql.FieldbyName('ApeVen').AsString) <> '' then
        pnNomVen.Caption := quSql.FieldbyName('ApeVen').AsString
      else
      begin

        pnNomVen.Caption := '';

        fmsgErro('Vendedor Informado não Encontrado', EdCodVen);

      end;

    end
    else
    begin

      pnNomVen.Caption := '';

      fmsgErro('Campo de Preenchimento Obrigatorio não Informado', EdCodVen);

    end;
  end;
end;

procedure TfmManCr1.EdCodCliExit(Sender: TObject);
begin
  inherited;
  SaiCliente;
end;

procedure TfmManCr1.FormDestroy(Sender: TObject);
begin
  inherited;
  fmManCr1 := nil;
end;

end.
