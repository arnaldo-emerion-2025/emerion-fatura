unit CmpR16;

interface

uses
  Windows, Messages, SysUtils, Classes, Graphics, Controls, Forms, Dialogs,
  FPadrao, StdCtrls, Buttons, ComCtrls, Db, DBTables, Wwquery, ExtCtrls, FlEdit,
  Grids, Wwdbigrd, Wwdbgrid, hGrid, Wwdatsrc, Mask, hEdits, wwdbedit,
  Wwdotdot, Wwdbcomb, DBCtrls, AlignEdit, QuickRpt, ppDB, ppDBPipe, ppBands,
  ppClass, ppStrtch, ppMemo, ppVar, jpeg, ppCtrls, ppPrnabl, ppCache, ppComm,
  ppRelatv, ppProd, ppReport, ppModule, daDatMod, wwdbdatetimepicker,
  dxPSCore, dxPSdxTLLnk, dxPSdxDBCtrlLnk, dxPSdxDBGrLnk, ImgList, Menus,
  dxCntner, dxEditor, dxEdLib, dxTL, dxDBCtrl, dxDBGrid, dxExEdtr,
  dxColorEdit;

type
  TSaveMethod = procedure(const FileName: string; ASaveAll: Boolean) of object;

  TfmCmpR16 = class(TfmPadrao)
    EstR02: TwwQuery;
    quSql: TwwQuery;
    PopUpMenu: TPopupMenu;
    Exportarpara1: TMenuItem;
    HTML: TMenuItem;
    Excel: TMenuItem;
    XML: TMenuItem;
    dxComponentPrinter: TdxComponentPrinter;
    dxComponentPrinterLink1: TdxDBGridReportLink;
    SaveDialog: TSaveDialog;
    EstR02CODEMP: TIntegerField;
    EstR02NOMEMP: TStringField;
    EstR02NOMGRU: TStringField;
    EstR02NOMSUB: TStringField;
    EstR02DSCPRO: TStringField;
    EstR02REFPRO: TStringField;
    EstR02CODUNS: TStringField;
    PaintBox: TPaintBox;
    grR02: TdxDBGrid;
    CODEMP: TdxDBGridMaskColumn;
    CODITE: TdxDBGridMaskColumn;
    DSCPRO: TdxDBGridMaskColumn;
    REFPRO: TdxDBGridMaskColumn;
    CODUNS: TdxDBGridMaskColumn;
    VALOR: TdxDBGridMaskColumn;
    Label5: TLabel;
    Label10: TLabel;
    Bevel1: TBevel;
    Label13: TLabel;
    EdCodEmp: TdxColorEdit;
    BbPsqEmp: TSpeedButton;
    EdNomEmp: TdxColorEdit;
    bPesquisa: TBitBtn;
    bImprimir: TBitBtn;
    Label2: TLabel;
    Bevel2: TBevel;
    DsR02: TwwDataSource;
    EstR02VALOR: TFloatField;
    rgValor: TRadioGroup;
    EstR02TOTAL: TFloatField;
    TOTAL: TdxDBGridColumn;
    Label3: TLabel;
    Label7: TLabel;
    EdCodPro: TdxColorEdit;
    BbPsqPro: TSpeedButton;
    EdNomPro: TdxColorEdit;
    Label110: TLabel;
    Label111: TLabel;
    Label112: TLabel;
    Label47: TLabel;
    Label48: TLabel;
    Label49: TLabel;
    EdCodSub: TdxColorEdit;
    EdCodGru: TdxColorEdit;
    EdCodClp: TdxColorEdit;
    EdCodMrc: TdxColorEdit;
    EdCodTip: TdxColorEdit;
    EdCodCat: TdxColorEdit;
    bPsqCat: TSpeedButton;
    bPsqTip: TSpeedButton;
    bPsqMrc: TSpeedButton;
    BbPsqClp: TSpeedButton;
    BbPsqGru: TSpeedButton;
    BbPsqSub: TSpeedButton;
    EdNomSub: TdxColorEdit;
    EdNomGru: TdxColorEdit;
    EdNomClp: TdxColorEdit;
    EdNomMrc: TdxColorEdit;
    EdNomTip: TdxColorEdit;
    EdNomCat: TdxColorEdit;
    Label1: TLabel;
    Label4: TLabel;
    Label6: TLabel;
    Label8: TLabel;
    Label9: TLabel;
    Label11: TLabel;
    EstR02QTDRMA: TFloatField;
    QTDRMA: TdxDBGridColumn;
    EstR02CODITE: TStringField;
    procedure FormCreate(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure grR02ReloadGroupList(Sender: TObject);
    procedure HTMLClick(Sender: TObject);
    procedure ExcelClick(Sender: TObject);
    procedure XMLClick(Sender: TObject);
    procedure bPesquisaClick(Sender: TObject);
    procedure BbPsqEmpClick(Sender: TObject);
    procedure BbPsqClpClick(Sender: TObject);
    procedure BbPsqGruClick(Sender: TObject);
    procedure BbPsqSubClick(Sender: TObject);
    procedure BbPsqProClick(Sender: TObject);
    procedure EdCodEmpExit(Sender: TObject);
    procedure EdCodClpExit(Sender: TObject);
    procedure EdCodGruExit(Sender: TObject);
    procedure EdCodSubExit(Sender: TObject);
    procedure EdCodProExit(Sender: TObject);
    procedure bImprimirClick(Sender: TObject);
    procedure PaintBoxPaint(Sender: TObject);
    procedure EdCodEmpKeyPress(Sender: TObject; var Key: Char);
    procedure bPsqCatClick(Sender: TObject);
    procedure EdCodCatExit(Sender: TObject);
    procedure bPsqTipClick(Sender: TObject);
    procedure EdCodTipExit(Sender: TObject);
    procedure bPsqMrcClick(Sender: TObject);
    procedure EdCodMrcExit(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure FormDestroy(Sender: TObject);
  private
    {Private declarations}
    procedure Save(ADefaultExt, AFilter, AFileName: string; AMethod: TSaveMethod);
  public
    {Public declarations}
    sDate, sFiltro, sOrdem: string;
  end;

var
  fmCmpR16: TfmCmpR16;

implementation

uses dxDemoUtils, ShellAPI, Bbgeral, BbMensag, Bbfuncao, ManGDB, FPreview,
  PsqEmp, ManPri, AuxIni;

{$R *.DFM}

procedure TfmCmpR16.Save(ADefaultExt, AFilter, AFileName: string; AMethod: TSaveMethod);
begin
  with SaveDialog do
  begin

    DefaultExt := ADefaultExt;

    Filter := AFilter;

    FileName := AFileName;

    if Execute then AMethod(FileName, True);

  end;
end;

procedure TfmCmpR16.FormCreate(Sender: TObject);
begin

  sDate := copy(FormatDateTime('dd/mm/yyyy', Date), 1, 2) +
    copy(FormatDateTime('dd/mm/yyyy', Date), 4, 2) +
    copy(FormatDateTime('dd/mm/yyyy', Date), 7, 4);

  SaveDialog.InitialDir := ExtractFilePath(Application.ExeName);

end;

procedure TfmCmpR16.FormShow(Sender: TObject);
begin
  EdCodEmp.SetFocus;
end;

procedure TfmCmpR16.grR02ReloadGroupList(Sender: TObject);
begin
  inherited;
  (Sender as TdxDBGrid).FullExpand;
end;

procedure TfmCmpR16.HTMLClick(Sender: TObject);
begin
  inherited;
  Save('htm', 'HTML File (*.htm; *.html)|*.htm', 'EstR02' + sDate + '.htm', grR02.SaveToHTML);
end;

procedure TfmCmpR16.ExcelClick(Sender: TObject);
begin
  inherited;
  Save('xls', 'Microsoft Excel 4.0 Worksheet (*.xls)|*.xls', 'EstR02' + sDate + '.xls', grR02.SaveToXLS);
end;

procedure TfmCmpR16.XMLClick(Sender: TObject);
begin
  inherited;
  Save('xml', 'XML File (*.xml)|*.xml', 'EstR02' + sDate + '.xml', grR02.SaveToXML);
end;

procedure TfmCmpR16.bPesquisaClick(Sender: TObject);
var
  sBase: string;
begin
  inherited;

  ActiveControl := nil;

  if GFlgAce <> 'Sim' then
  begin

    with quSQL, SQL do
    begin

      Close;
      Text := ' Select FLGDEL,SEQIMP from GerPar';
      Open;

      if Trim(FieldbyName('FLGDEL').AsString) = '*' then
      begin

        GFlgAce := 'Sim';

        if FieldbyName('SEQIMP').AsInteger > 0 then GEmpLog := FieldbyName('SEQIMP').AsInteger;

      end
      else
      begin

        GEmpLog := 0;
        GFlgAce := 'Nao';

      end;
    end;
  end;

  if Trim(EdCodEmp.Text) = '' then fmsgErro('Campo de Preenchimento Obrigatorio não Informado. Empresa.', EdCodEmp);

  sFiltro := ' Where EstPro.FlbPro = ''' + ' ' + ''' and EstIte.QtdRma > 0';

  if Trim(EdCodEmp.Text) <> '' then sFiltro := sFiltro + ' and EstIte.CodEmp = ''' + EdCodEmp.Text + '''';
  if Trim(EdCodCat.Text) <> '' then sFiltro := sFiltro + ' and EstPro.CodCat = ''' + EdCodCat.Text + '''';
  if Trim(EdCodTip.Text) <> '' then sFiltro := sFiltro + ' and EstPro.CodTip = ''' + EdCodTip.Text + '''';
  if Trim(EdCodMrc.Text) <> '' then sFiltro := sFiltro + ' and EstPro.CodMrc = ''' + EdCodMrc.Text + '''';
  if Trim(EdCodClp.Text) <> '' then sFiltro := sFiltro + ' and EstIte.CodClp = ''' + EdCodClp.Text + '''';
  if Trim(EdCodGru.Text) <> '' then sFiltro := sFiltro + ' and EstIte.CodGru = ''' + EdCodGru.Text + '''';
  if Trim(EdCodSub.Text) <> '' then sFiltro := sFiltro + ' and EstIte.CodSub = ''' + EdCodSub.Text + '''';
  if Trim(EdCodPro.Text) <> '' then sFiltro := sFiltro + ' and EstIte.CodPro = ''' + EdCodPro.Text + '''';

  if GFlgAce = 'Sim' then sFiltro := sFiltro + ' and GerEmp.CodFil > ''' + '0' + '''';

  if rgValor.ItemIndex = 0 then sBase := ' Select EstIte.CodEmp,' +
    '        GerEmp.NomEmp,' +
      '        EstIte.CodClp,' +
      '        EstIte.CodGru,' +
      '        EstGru.NomGru,' +
      '        EstIte.CodSub,' +
      '        EstSub.NomSub,' +
      '        EstIte.CodPro,' +
      '        EstPro.DscPro,' +
      '        EstPro.RefPro,' +
      '        EstPro.CodUns,' +
      '        EstIte.Vb1Ite as Valor,' +
      '        EstIte.QtdRma,' +
      '        Round(EstIte.QtdRma * EstIte.Vb1Ite,2) as Total,' +
      '        EstIte.CodClp || _UNICODE_FSS ''' + '-' + ''' || EstIte.CodGru || _UNICODE_FSS ''' + '.' + ''' || EstIte.CodSub || _UNICODE_FSS ''' + '.' + ''' || EstIte.CodPro as CodIte' +
      ' From EstIte LEFT JOIN EstPro ON (EstIte.CodClp = EstPro.CodClp ' +
      '                             AND  EstIte.CodGru = EstPro.CodGru ' +
      '                             AND  EstIte.CodSub = EstPro.CodSub ' +
      '                             AND  EstIte.CodPro = EstPro.CodPro)' +
      '             LEFT JOIN EstSub ON (EstPro.CodGru = EstSub.CodGru ' +
      '                             AND  EstPro.CodSub = EstSub.CodSub)' +
      '             LEFT JOIN EstGru ON (EstSub.CodGru = EstGru.CodGru)' +
      '             LEFT JOIN GerEmp ON (EstIte.CodEmp = GerEmp.CodEmp)';

  if rgValor.ItemIndex = 1 then sBase := ' Select EstIte.CodEmp,' +
    '        GerEmp.NomEmp,' +
      '        EstIte.CodClp,' +
      '        EstIte.CodGru,' +
      '        EstGru.NomGru,' +
      '        EstIte.CodSub,' +
      '        EstSub.NomSub,' +
      '        EstIte.CodPro,' +
      '        EstPro.DscPro,' +
      '        EstPro.RefPro,' +
      '        EstPro.CodUns,' +
      '        EstIte.Vb2Ite as Valor,' +
      '        EstIte.QtdRma,' +
      '        Round(EstIte.QtdRma * EstIte.Vb2Ite,2) as Total,' +
      '        EstIte.CodClp || _UNICODE_FSS ''' + '-' + ''' || EstIte.CodGru || _UNICODE_FSS ''' + '.' + ''' || EstIte.CodSub || _UNICODE_FSS ''' + '.' + ''' || EstIte.CodPro as CodIte' +
      ' From EstIte LEFT JOIN EstPro ON (EstIte.CodClp = EstPro.CodClp ' +
      '                             AND  EstIte.CodGru = EstPro.CodGru ' +
      '                             AND  EstIte.CodSub = EstPro.CodSub ' +
      '                             AND  EstIte.CodPro = EstPro.CodPro)' +
      '             LEFT JOIN EstSub ON (EstPro.CodGru = EstSub.CodGru ' +
      '                             AND  EstPro.CodSub = EstSub.CodSub)' +
      '             LEFT JOIN EstGru ON (EstSub.CodGru = EstGru.CodGru)' +
      '             LEFT JOIN GerEmp ON (EstIte.CodEmp = GerEmp.CodEmp)';

  if rgValor.ItemIndex = 2 then sBase := ' Select EstIte.CodEmp,' +
    '        GerEmp.NomEmp,' +
      '        EstIte.CodClp,' +
      '        EstIte.CodGru,' +
      '        EstGru.NomGru,' +
      '        EstIte.CodSub,' +
      '        EstSub.NomSub,' +
      '        EstIte.CodPro,' +
      '        EstPro.DscPro,' +
      '        EstPro.RefPro,' +
      '        EstPro.CodUns,' +
      '        EstIte.Vb3Ite as Valor,' +
      '        EstIte.QtdRma,' +
      '        Round(EstIte.QtdRma * EstIte.Vb3Ite,2) as Total,' +
      '        EstIte.CodClp || _UNICODE_FSS ''' + '-' + ''' || EstIte.CodGru || _UNICODE_FSS ''' + '.' + ''' || EstIte.CodSub || _UNICODE_FSS ''' + '.' + ''' || EstIte.CodPro as CodIte' +
      ' From EstIte LEFT JOIN EstPro ON (EstIte.CodClp = EstPro.CodClp ' +
      '                             AND  EstIte.CodGru = EstPro.CodGru ' +
      '                             AND  EstIte.CodSub = EstPro.CodSub ' +
      '                             AND  EstIte.CodPro = EstPro.CodPro)' +
      '             LEFT JOIN EstSub ON (EstPro.CodGru = EstSub.CodGru ' +
      '                             AND  EstPro.CodSub = EstSub.CodSub)' +
      '             LEFT JOIN EstGru ON (EstSub.CodGru = EstGru.CodGru)' +
      '             LEFT JOIN GerEmp ON (EstIte.CodEmp = GerEmp.CodEmp)';

  if rgValor.ItemIndex = 3 then sBase := ' Select EstIte.CodEmp,' +
    '        GerEmp.NomEmp,' +
      '        EstIte.CodClp,' +
      '        EstIte.CodGru,' +
      '        EstGru.NomGru,' +
      '        EstIte.CodSub,' +
      '        EstSub.NomSub,' +
      '        EstIte.CodPro,' +
      '        EstPro.DscPro,' +
      '        EstPro.RefPro,' +
      '        EstPro.CodUns,' +
      '        EstIte.Vb4Ite as Valor,' +
      '        EstIte.QtdRma,' +
      '        Round(EstIte.QtdRma * EstIte.Vb4Ite,2) as Total,' +
      '        EstIte.CodClp || _UNICODE_FSS ''' + '-' + ''' || EstIte.CodGru || _UNICODE_FSS ''' + '.' + ''' || EstIte.CodSub || _UNICODE_FSS ''' + '.' + ''' || EstIte.CodPro as CodIte' +
      ' From EstIte LEFT JOIN EstPro ON (EstIte.CodClp = EstPro.CodClp ' +
      '                             AND  EstIte.CodGru = EstPro.CodGru ' +
      '                             AND  EstIte.CodSub = EstPro.CodSub ' +
      '                             AND  EstIte.CodPro = EstPro.CodPro)' +
      '             LEFT JOIN EstSub ON (EstPro.CodGru = EstSub.CodGru ' +
      '                             AND  EstPro.CodSub = EstSub.CodSub)' +
      '             LEFT JOIN EstGru ON (EstSub.CodGru = EstGru.CodGru)' +
      '             LEFT JOIN GerEmp ON (EstIte.CodEmp = GerEmp.CodEmp)';

  if rgValor.ItemIndex = 4 then sBase := ' Select EstIte.CodEmp,' +
    '        GerEmp.NomEmp,' +
      '        EstIte.CodClp,' +
      '        EstIte.CodGru,' +
      '        EstGru.NomGru,' +
      '        EstIte.CodSub,' +
      '        EstSub.NomSub,' +
      '        EstIte.CodPro,' +
      '        EstPro.DscPro,' +
      '        EstPro.RefPro,' +
      '        EstPro.CodUns,' +
      '        EstIte.Vb5Ite as Valor,' +
      '        EstIte.QtdRma,' +
      '        Round(EstIte.QtdRma * EstIte.Vb5Ite,2) as Total,' +
      '        EstIte.CodClp || _UNICODE_FSS ''' + '-' + ''' || EstIte.CodGru || _UNICODE_FSS ''' + '.' + ''' || EstIte.CodSub || _UNICODE_FSS ''' + '.' + ''' || EstIte.CodPro as CodIte' +
      ' From EstIte LEFT JOIN EstPro ON (EstIte.CodClp = EstPro.CodClp ' +
      '                             AND  EstIte.CodGru = EstPro.CodGru ' +
      '                             AND  EstIte.CodSub = EstPro.CodSub ' +
      '                             AND  EstIte.CodPro = EstPro.CodPro)' +
      '             LEFT JOIN EstSub ON (EstPro.CodGru = EstSub.CodGru ' +
      '                             AND  EstPro.CodSub = EstSub.CodSub)' +
      '             LEFT JOIN EstGru ON (EstSub.CodGru = EstGru.CodGru)' +
      '             LEFT JOIN GerEmp ON (EstIte.CodEmp = GerEmp.CodEmp)';

  if rgValor.ItemIndex = 5 then sBase := ' Select EstIte.CodEmp,' +
    '        GerEmp.NomEmp,' +
      '        EstIte.CodClp,' +
      '        EstIte.CodGru,' +
      '        EstGru.NomGru,' +
      '        EstIte.CodSub,' +
      '        EstSub.NomSub,' +
      '        EstIte.CodPro,' +
      '        EstPro.DscPro,' +
      '        EstPro.RefPro,' +
      '        EstPro.CodUns,' +
      '        EstIte.CstIte as Valor,' +
      '        EstIte.QtdRma,' +
      '        Round(EstIte.QtdRma * EstIte.CstIte,2) as Total,' +
      '        EstIte.CodClp || _UNICODE_FSS ''' + '-' + ''' || EstIte.CodGru || _UNICODE_FSS ''' + '.' + ''' || EstIte.CodSub || _UNICODE_FSS ''' + '.' + ''' || EstIte.CodPro as CodIte' +
      ' From EstIte LEFT JOIN EstPro ON (EstIte.CodClp = EstPro.CodClp ' +
      '                             AND  EstIte.CodGru = EstPro.CodGru ' +
      '                             AND  EstIte.CodSub = EstPro.CodSub ' +
      '                             AND  EstIte.CodPro = EstPro.CodPro)' +
      '             LEFT JOIN EstSub ON (EstPro.CodGru = EstSub.CodGru ' +
      '                             AND  EstPro.CodSub = EstSub.CodSub)' +
      '             LEFT JOIN EstGru ON (EstSub.CodGru = EstGru.CodGru)' +
      '             LEFT JOIN GerEmp ON (EstIte.CodEmp = GerEmp.CodEmp)';

  if rgValor.ItemIndex = 6 then sBase := ' Select EstIte.CodEmp,' +
    '        GerEmp.NomEmp,' +
      '        EstIte.CodClp,' +
      '        EstIte.CodGru,' +
      '        EstGru.NomGru,' +
      '        EstIte.CodSub,' +
      '        EstSub.NomSub,' +
      '        EstIte.CodPro,' +
      '        EstPro.DscPro,' +
      '        EstPro.RefPro,' +
      '        EstPro.CodUns,' +
      '        EstIte.VpfIte as Valor,' +
      '        EstIte.QtdRma,' +
      '        Round(EstIte.QtdRma * EstIte.VpfIte,2) as Total,' +
      '        EstIte.CodClp || _UNICODE_FSS ''' + '-' + ''' || EstIte.CodGru || _UNICODE_FSS ''' + '.' + ''' || EstIte.CodSub || _UNICODE_FSS ''' + '.' + ''' || EstIte.CodPro as CodIte' +
      ' From EstIte LEFT JOIN EstPro ON (EstIte.CodClp = EstPro.CodClp ' +
      '                             AND  EstIte.CodGru = EstPro.CodGru ' +
      '                             AND  EstIte.CodSub = EstPro.CodSub ' +
      '                             AND  EstIte.CodPro = EstPro.CodPro)' +
      '             LEFT JOIN EstSub ON (EstPro.CodGru = EstSub.CodGru ' +
      '                             AND  EstPro.CodSub = EstSub.CodSub)' +
      '             LEFT JOIN EstGru ON (EstSub.CodGru = EstGru.CodGru)' +
      '             LEFT JOIN GerEmp ON (EstIte.CodEmp = GerEmp.CodEmp)';

  if rgValor.ItemIndex = 7 then sBase := ' Select EstIte.CodEmp,' +
    '        GerEmp.NomEmp,' +
      '        EstIte.CodClp,' +
      '        EstIte.CodGru,' +
      '        EstGru.NomGru,' +
      '        EstIte.CodSub,' +
      '        EstSub.NomSub,' +
      '        EstIte.CodPro,' +
      '        EstPro.DscPro,' +
      '        EstPro.RefPro,' +
      '        EstPro.CodUns,' +
      '        EstIte.VchIte as Valor,' +
      '        EstIte.QtdRma,' +
      '        Round(EstIte.QtdRma * EstIte.VchIte,2) as Total,' +
      '        EstIte.CodClp || _UNICODE_FSS ''' + '-' + ''' || EstIte.CodGru || _UNICODE_FSS ''' + '.' + ''' || EstIte.CodSub || _UNICODE_FSS ''' + '.' + ''' || EstIte.CodPro as CodIte' +
      ' From EstIte LEFT JOIN EstPro ON (EstIte.CodClp = EstPro.CodClp ' +
      '                             AND  EstIte.CodGru = EstPro.CodGru ' +
      '                             AND  EstIte.CodSub = EstPro.CodSub ' +
      '                             AND  EstIte.CodPro = EstPro.CodPro)' +
      '             LEFT JOIN EstSub ON (EstPro.CodGru = EstSub.CodGru ' +
      '                             AND  EstPro.CodSub = EstSub.CodSub)' +
      '             LEFT JOIN EstGru ON (EstSub.CodGru = EstGru.CodGru)' +
      '             LEFT JOIN GerEmp ON (EstIte.CodEmp = GerEmp.CodEmp)';

  if rgValor.ItemIndex = 8 then sBase := ' Select EstIte.CodEmp,' +
    '        GerEmp.NomEmp,' +
      '        EstIte.CodClp,' +
      '        EstIte.CodGru,' +
      '        EstGru.NomGru,' +
      '        EstIte.CodSub,' +
      '        EstSub.NomSub,' +
      '        EstIte.CodPro,' +
      '        EstPro.DscPro,' +
      '        EstPro.RefPro,' +
      '        EstPro.CodUns,' +
      '        EstIte.VcrIte as Valor,' +
      '        EstIte.QtdRma,' +
      '        Round(EstIte.QtdRma * EstIte.VcrIte,2) as Total,' +
      '        EstIte.CodClp || _UNICODE_FSS ''' + '-' + ''' || EstIte.CodGru || _UNICODE_FSS ''' + '.' + ''' || EstIte.CodSub || _UNICODE_FSS ''' + '.' + ''' || EstIte.CodPro as CodIte' +
      ' From EstIte LEFT JOIN EstPro ON (EstIte.CodClp = EstPro.CodClp ' +
      '                             AND  EstIte.CodGru = EstPro.CodGru ' +
      '                             AND  EstIte.CodSub = EstPro.CodSub ' +
      '                             AND  EstIte.CodPro = EstPro.CodPro)' +
      '             LEFT JOIN EstSub ON (EstPro.CodGru = EstSub.CodGru ' +
      '                             AND  EstPro.CodSub = EstSub.CodSub)' +
      '             LEFT JOIN EstGru ON (EstSub.CodGru = EstGru.CodGru)' +
      '             LEFT JOIN GerEmp ON (EstIte.CodEmp = GerEmp.CodEmp)';

  with EstR02, SQL do
  begin

    Close;
    Text := sBase + sFiltro + ' Order by EstIte.CodEmp,EstIte.CodGru,EstIte.CodSub,EstIte.CodPro';
    Open;

  end;

  grR02.FullExpand;

  grR02.SetFocus;

end;

procedure TfmCmpR16.BbPsqEmpClick(Sender: TObject);
begin
  inherited;

  try

    fmPsqEmp := TfmPsqEmp.Create(Self);
    fmPsqEmp.ShowModal;

    if fmPsqEmp.CodEmp > 0 then
    begin

      EdNomEmp.Text := fmPsqEmp.NomEmp;
      EdCodEmp.Text := IntToStr(fmPsqEmp.CodEmp);

    end;

  finally

    FreeAndNil(fmPsqEmp);

  end;

  if Trim(EdCodEmp.Text) <> '' then EdCodClp.SetFocus;

end;

procedure TfmCmpR16.BbPsqClpClick(Sender: TObject);
begin
  inherited;

  try

    fmAuxIni := TfmAuxIni.Create(Self);

    if Trim(EdCodCat.Text) <> '' then fmAuxIni.CodCat := StrToInt(EdCodCat.Text);
    if Trim(EdCodTip.Text) <> '' then fmAuxIni.CodTip := StrToInt(EdCodTip.Text);
    if Trim(EdCodMrc.Text) <> '' then fmAuxIni.CodMrc := StrToInt(EdCodMrc.Text);

    fmAuxIni.TipoPesq := 'Cls';

    fmAuxIni.ShowModal;

    if Trim(fmAuxIni.CodClp) <> '' then
    begin

      EdCodClp.Text := fmAuxIni.CodClp;
      EdNomClp.Text := fmAuxIni.NomClp;

    end;

  finally

    FreeAndNil(fmAuxIni);

  end;

  if Trim(EdCodClp.Text) <> '' then EdCodGru.SetFocus;

end;

procedure TfmCmpR16.BbPsqGruClick(Sender: TObject);
begin
  inherited;

  try

    fmAuxIni := TfmAuxIni.Create(Self);

    if Trim(EdCodCat.Text) <> '' then fmAuxIni.CodCat := StrToInt(EdCodCat.Text);
    if Trim(EdCodTip.Text) <> '' then fmAuxIni.CodTip := StrToInt(EdCodTip.Text);
    if Trim(EdCodMrc.Text) <> '' then fmAuxIni.CodMrc := StrToInt(EdCodMrc.Text);
    if Trim(EdCodClp.Text) <> '' then fmAuxIni.CodClp := EdCodClp.Text;

    fmAuxIni.TipoPesq := 'G';

    fmAuxIni.ShowModal;

    if Trim(fmAuxIni.CodGru) <> '' then
    begin

      EdCodGru.Text := fmAuxIni.CodGru;
      EdNomGru.Text := fmAuxIni.NomGru;

    end;

  finally

    FreeAndNil(fmAuxIni);

  end;

  if Trim(EdCodGru.Text) <> '' then EdCodSub.SetFocus;

end;

procedure TfmCmpR16.BbPsqSubClick(Sender: TObject);
begin
  inherited;

  try

    fmAuxIni := TfmAuxIni.Create(Self);

    if Trim(EdCodCat.Text) <> '' then fmAuxIni.CodCat := StrToInt(EdCodCat.Text);
    if Trim(EdCodTip.Text) <> '' then fmAuxIni.CodTip := StrToInt(EdCodTip.Text);
    if Trim(EdCodMrc.Text) <> '' then fmAuxIni.CodMrc := StrToInt(EdCodMrc.Text);
    if Trim(EdCodClp.Text) <> '' then fmAuxIni.CodClp := EdCodClp.Text;
    if Trim(EdCodGru.Text) <> '' then fmAuxIni.CodGru := EdCodGru.Text;

    fmAuxIni.TipoPesq := 'S';

    fmAuxIni.ShowModal;

    if Trim(fmAuxIni.CodSub) <> '' then
    begin

      EdCodGru.Text := fmAuxIni.CodGru;
      EdNomGru.Text := fmAuxIni.NomGru;
      EdCodSub.Text := fmAuxIni.CodSub;
      EdNomSub.Text := fmAuxIni.NomSub;

    end;

  finally

    FreeAndNil(fmAuxIni);

  end;

  if Trim(EdCodSub.Text) <> '' then EdCodPro.SetFocus;

end;

procedure TfmCmpR16.BbPsqProClick(Sender: TObject);
begin
  inherited;

  try

    fmAuxIni := TfmAuxIni.Create(Self);

    if Trim(EdCodCat.Text) <> '' then fmAuxIni.CodCat := StrToInt(EdCodCat.Text);
    if Trim(EdCodTip.Text) <> '' then fmAuxIni.CodTip := StrToInt(EdCodTip.Text);
    if Trim(EdCodMrc.Text) <> '' then fmAuxIni.CodMrc := StrToInt(EdCodMrc.Text);
    if Trim(EdCodClp.Text) <> '' then fmAuxIni.CodClp := EdCodClp.Text;
    if Trim(EdCodGru.Text) <> '' then fmAuxIni.CodGru := EdCodGru.Text;
    if Trim(EdCodSub.Text) <> '' then fmAuxIni.CodGru := EdCodSub.Text;

    fmAuxIni.TipoPesq := 'I';

    fmAuxIni.ShowModal;

    if Trim(fmAuxIni.CodPro) <> '' then
    begin

      EdCodClp.Text := fmAuxIni.CodClp;
      EdNomClp.Text := fmAuxIni.NomClp;
      EdCodGru.Text := fmAuxIni.CodGru;
      EdNomGru.Text := fmAuxIni.NomGru;
      EdCodSub.Text := fmAuxIni.CodSub;
      EdNomSub.Text := fmAuxIni.NomSub;
      EdCodPro.Text := fmAuxIni.CodPro;
      EdNomPro.Text := fmAuxIni.DscPro;

    end;

  finally

    FreeAndNil(fmAuxIni);

  end;

  if Trim(EdCodPro.Text) <> '' then bPesquisa.SetFocus;

end;

procedure TfmCmpR16.EdCodEmpExit(Sender: TObject);
begin
  inherited;
  if Trim(EdCodEmp.Text) <> '' then
  begin

    if GFlgAce <> 'Sim' then
    begin

      with quSQL, SQL do
      begin

        Close;
        Text := ' Select FLGDEL,SEQIMP from GerPar';
        Open;

        if Trim(FieldbyName('FLGDEL').AsString) = '*' then
        begin

          GFlgAce := 'Sim';

          if FieldbyName('SEQIMP').AsInteger > 0 then GEmpLog := FieldbyName('SEQIMP').AsInteger;

        end
        else
        begin

          GEmpLog := 0;
          GFlgAce := 'Nao';

        end;
      end;
    end;

    with quSql, SQL do
    begin

      Close;
      Text := ' Select NomEmp From GerEmp Where GerEmp.CodEmp = ' + QuotedStr(EdCodEmp.Text);

      if GFlgAce = 'Sim' then
      begin

        if GEmpLog > 0 then
          Text := Text + ' and GerEmp.CodEmp = ' + QuotedStr(IntToStr(GEmpLog))
        else
          Text := Text + ' and GerEmp.CodFil > 0';

      end;

      Open;

      if Trim(FieldByName('NomEmp').AsString) <> '' then
        EdNomEmp.Text := FieldByName('NomEmp').AsString
      else
      begin

        EdNomEmp.Text := '';

        fmsgErro('Empresa Informada não Encontrada.', EdCodEmp);

      end;
    end;

  end
  else
    EdNomEmp.Text := '';
end;

procedure TfmCmpR16.EdCodClpExit(Sender: TObject);
begin
  inherited;
  if Trim(EdCodClp.Text) <> '' then
  begin

    with quSql, SQL do
    begin

      Close;
      Text := ' Select NomClp From EstClp Where CodClp = ''' + EdCodClp.Text + '''';
      Open;

      EdNomClp.Text := FieldByName('NomClp').AsString;

    end;

  end
  else
    EdNomClp.Text := '';
end;

procedure TfmCmpR16.EdCodGruExit(Sender: TObject);
begin
  inherited;
  if Trim(EdCodGru.Text) <> '' then
  begin

    EdCodGru.Text := FNumZeros(EdCodGru.Text, 3);

    with quSql, SQL do
    begin

      Close;
      Text := ' Select NomGru From EstGru ' +
        ' Where CodGru = ''' + EdCodGru.Text + '''';
      Open;

    end;

    if Trim(quSQL.FieldbyName('NomGru').AsString) <> '' then
      EdNomGru.Text := quSql.FieldByName('NomGru').AsString
    else
      fmsgErro('Grupo Informado não Encontrado.', EdCodGru);

  end
  else
    EdNomGru.Text := '';
end;

procedure TfmCmpR16.EdCodSubExit(Sender: TObject);
begin
  inherited;
  if Trim(EdCodSub.Text) <> '' then
  begin

    EdCodSub.Text := FNumZeros(EdCodSub.Text, 4);

    with quSql, SQL do
    begin

      Close;
      Text := ' Select NomSub From EstSub ' +
        ' Where CodGru = ''' + EdCodGru.Text + '''' +
        '   and CodSub = ''' + EdCodSub.Text + '''';
      Open;

    end;

    if Trim(quSQL.FieldbyName('NomSub').AsString) <> '' then
      EdNomSub.Text := quSql.FieldByName('NomSub').AsString
    else
      fmsgErro('SubGrupo Informado não Encontrado.', EdCodSub);

  end
  else
    EdNomSub.Text := '';
end;

procedure TfmCmpR16.EdCodProExit(Sender: TObject);
begin
  inherited;
  if Trim(EdCodPro.Text) <> '' then
  begin

    EdCodPro.Text := FNumStrZero(EdCodPro.Text);

    with quSql, SQL do
    begin

      Close;
      Text := ' Select DscPro From EstPro ' +
        ' Where CodClp = :CodClp' +
        '   and CodGru = :CodGru' +
        '   and CodSub = :CodSub' +
        '   and CodPro = :CodPro';

      with Params do
      begin

        Params[0].AsString := EdCodClp.Text;
        Params[1].AsString := EdCodGru.Text;
        Params[2].AsString := EdCodSub.Text;
        Params[3].AsString := EdCodPro.Text;

      end;

      Open;

    end;

    if Trim(quSQL.FieldbyName('DscPro').AsString) <> '' then
      EdNomPro.Text := quSql.FieldByName('DscPro').AsString
    else
      fmsgErro('Item Informado não Encontrado.', EdCodPro);

  end
  else
    EdNomPro.Text := '';
end;

procedure TfmCmpR16.bImprimirClick(Sender: TObject);
begin
  inherited;

  ActiveControl := nil;

  dxComponentPrinterLink1.PrinterPage.PageHeader.LeftTitle.Clear;

  dxComponentPrinterLink1.PrinterPage.PageHeader.LeftTitle.Add(' ');
  dxComponentPrinterLink1.PrinterPage.PageHeader.LeftTitle.Add('Empresa : ' + EdCodEmp.Text + ' - ' + EdNomEmp.Text);
  dxComponentPrinterLink1.PrinterPage.PageHeader.LeftTitle.Add('Categoria : ' + EdCodCat.Text + ' - ' + EdNomCat.Text);
  dxComponentPrinterLink1.PrinterPage.PageHeader.LeftTitle.Add('Tipo : ' + EdCodTip.Text + ' - ' + EdNomTip.Text);
  dxComponentPrinterLink1.PrinterPage.PageHeader.LeftTitle.Add('Marca : ' + EdCodMrc.Text + ' - ' + EdNomMrc.Text);
  dxComponentPrinterLink1.PrinterPage.PageHeader.LeftTitle.Add('Classificação : ' + EdCodClp.Text + ' - ' + EdNomClp.Text);
  dxComponentPrinterLink1.PrinterPage.PageHeader.LeftTitle.Add('Grupo : ' + EdCodGru.Text + ' - ' + EdNomGru.Text);
  dxComponentPrinterLink1.PrinterPage.PageHeader.LeftTitle.Add('SubGrupo : ' + EdCodSub.Text + ' - ' + EdNomSub.Text);
  dxComponentPrinterLink1.PrinterPage.PageHeader.LeftTitle.Add('Item : ' + EdCodPro.Text + ' - ' + EdNomPro.Text);
  dxComponentPrinterLink1.PrinterPage.PageHeader.LeftTitle.Add(' ');

  dxComponentPrinterLink1.Preview;

end;

procedure TfmCmpR16.PaintBoxPaint(Sender: TObject);
begin
  inherited;
  with Sender as TPaintBox do
    FillGrayGradientRect(PaintBox.Canvas, PaintBox.ClientRect, PaintBox.Color);
end;

procedure TfmCmpR16.EdCodEmpKeyPress(Sender: TObject; var Key: Char);
begin
  inherited;
  if not (key in ['0'..'9']) then key := #0;
end;

procedure TfmCmpR16.bPsqCatClick(Sender: TObject);
begin
  inherited;

  try

    fmAuxIni := TfmAuxIni.Create(Self);

    fmAuxIni.TipoPesq := 'Categoria';

    fmAuxIni.ShowModal;

    if fmAuxIni.CodCat > 0 then
    begin

      EdNomCat.Text := fmAuxIni.NomCat;
      EdCodCat.Text := IntToStr(fmAuxIni.CodCat);

    end;

  finally

    FreeAndNil(fmAuxIni);

  end;

  if Trim(EdCodCat.Text) <> '' then EdCodTip.SetFocus;

end;

procedure TfmCmpR16.EdCodCatExit(Sender: TObject);
begin
  inherited;
  if Trim(EdCodCat.Text) <> '' then
  begin

    with quSql, SQL do
    begin

      Close;
      Text := ' Select NomCat From EstCat Where CodCat = ''' + EdCodCat.Text + '''';
      Open;

      EdNomCat.Text := FieldByName('NomCat').AsString;

    end;

  end
  else
    EdNomCat.Text := '';
end;

procedure TfmCmpR16.bPsqTipClick(Sender: TObject);
begin
  inherited;

  try

    fmAuxIni := TfmAuxIni.Create(Self);

    if Trim(EdCodCat.Text) <> '' then fmAuxIni.CodCat := StrToInt(EdCodCat.Text);

    fmAuxIni.TipoPesq := 'Tipo';

    fmAuxIni.ShowModal;

    if fmAuxIni.CodTip > 0 then
    begin

      EdNomTip.Text := fmAuxIni.NomTip;
      EdCodTip.Text := IntToStr(fmAuxIni.CodTip);

    end;

  finally

    FreeAndNil(fmAuxIni);

  end;

  if Trim(EdCodTip.Text) <> '' then EdCodMrc.SetFocus;

end;

procedure TfmCmpR16.EdCodTipExit(Sender: TObject);
begin
  inherited;
  if Trim(EdCodTip.Text) <> '' then
  begin

    with quSql, SQL do
    begin

      Close;
      Text := ' Select NomTip From EstTip Where CodTip = ''' + EdCodTip.Text + '''';
      Open;

      EdNomTip.Text := FieldByName('NomTip').AsString;

    end;

  end
  else
    EdNomTip.Text := '';
end;

procedure TfmCmpR16.bPsqMrcClick(Sender: TObject);
begin
  inherited;

  try

    fmAuxIni := TfmAuxIni.Create(Self);

    if Trim(EdCodCat.Text) <> '' then fmAuxIni.CodCat := StrToInt(EdCodCat.Text);
    if Trim(EdCodTip.Text) <> '' then fmAuxIni.CodTip := StrToInt(EdCodTip.Text);

    fmAuxIni.TipoPesq := 'Marca';

    fmAuxIni.ShowModal;

    if fmAuxIni.CodMrc > 0 then
    begin

      EdNomMrc.Text := fmAuxIni.NomMrc;
      EdCodMrc.Text := IntToStr(fmAuxIni.CodMrc);

    end;

  finally

    FreeAndNil(fmAuxIni);

  end;

  if Trim(EdCodMrc.Text) <> '' then EdCodClp.SetFocus;

end;

procedure TfmCmpR16.EdCodMrcExit(Sender: TObject);
begin
  inherited;
  if Trim(EdCodMrc.Text) <> '' then
  begin

    with quSql, SQL do
    begin

      Close;
      Text := ' Select NomMrc From EstMrc Where CodMrc = ''' + EdCodMrc.Text + '''';
      Open;

      EdNomMrc.Text := FieldByName('NomMrc').AsString;

    end;

  end
  else
    EdNomMrc.Text := '';
end;

procedure TfmCmpR16.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  inherited;
  Action := CaFree;
end;

procedure TfmCmpR16.FormDestroy(Sender: TObject);
begin
  inherited;
  fmCmpR16 := nil;
end;

end.
